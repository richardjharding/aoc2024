#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

open System
open System.IO
open System.Collections.Generic

let grid = File.ReadAllLines("input.txt") |> List.ofArray


let directions = [(-1,-1);(0,-1);(1,-1);(1,0);(1,1);(0,1);(-1,1);(-1,0);]
let isValid (x,y) = x >= 0 && y >= 0 && x < grid.[0].Length && y < grid.Length
let rec crawler (x,y) (dx,dy) chars =
    match chars with
    | [c] when grid.[y].[x] = c -> Some (x,y)
    | c::tail when grid.[y].[x] = c ->
        let next = (x + dx, y + dy)
        if isValid next then crawler next (dx,dy) tail
        else None
    | _ -> None
let crawl (x,y) (word:string) = 
    let chars = word |> Seq.toList
    let found = directions |> List.map (fun dir -> crawler (x,y) dir chars) |> List.choose id
    Some found.Length
    

let crawlAll (x,y) = ["XMAS"] |> List.map (crawl (x,y)) |> List.choose id
let result = [0..grid.Length-1] |> List.map (fun y -> [0..grid.[0].Length-1] |> List.map (fun x -> crawlAll (x,y)))

result |> List.concat |> List.map (fun l -> int l[0]) |> List.sum
