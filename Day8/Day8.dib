#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

open System
open System.IO
open System.Collections.Generic

let input = File.ReadAllLines("input.txt")

let frequencies =
    input
    |> String.concat ""
    |> Seq.filter (fun c -> c <> '.')
    |> Seq.distinct
    |> Seq.toList

let findCoordinates (char: char) =
    input
    |> Array.mapi (fun lineIndex line ->
        line
        |> Seq.mapi (fun charIndex c -> if c = char then Some (charIndex, lineIndex) else None)
        |> Seq.choose id
        |> Seq.toList)
    |> Array.toList
    |> List.concat

let coordinates =
    frequencies
    |> List.map (fun char -> (char, findCoordinates char))
    |> dict

let findPairs (coords: (int * int) list) =
    [for i in 0 .. coords.Length - 2 do
        for j in i + 1 .. coords.Length - 1 do
            yield (coords.[i], coords.[j])]

let pairs =
    frequencies
    |> List.map (fun char -> 
        match coordinates.TryGetValue(char) with
        | true, coords -> (char, findPairs coords)
        | _ -> (char, []))
    |> dict

let differences ((x1, y1), (x2, y2))=
    let dx = x2 - x1
    let dy = y2 - y1
    (dx, dy)

type Direction = LeftToRight | RightToLeft | Vertical | Horizontal

let direction (dx, dy) =
    if dx > 0 then LeftToRight
    elif dx < 0 then RightToLeft
    elif dy = 0 then Horizontal
    else Vertical

let calculateNewCoordinates (x, y) (dx, dy) =
    let newX = x - dx
    let newY = y - dy
    (newX, newY)

let findCandidateNodes freqPair = 
    let dist = differences freqPair
    let dir = direction dist
    let xDif = fst dist
    let yDif = snd dist
    let (coord1, coord2) = freqPair
    let newTopRight = calculateNewCoordinates (coord1) (xDif, yDif)
    let newBottomLeft = calculateNewCoordinates coord2 (-xDif, -yDif)
    [newTopRight; newBottomLeft]
    

let isWithinBounds (x, y) =
    let maxY = input.Length - 1
    let maxX = if maxY >= 0 then input.[0].Length - 1 else -1
    x >= 0 && x <= maxX && y >= 0 && y <= maxY

let freqNodePairs = pairs |> Seq.collect (fun kvp -> kvp.Value)

freqNodePairs
|> Seq.map findCandidateNodes
|> Seq.concat
|> Seq.filter isWithinBounds
|> Seq.distinct
|> Seq.length

#!fsharp

let candidateNodes2 freqPair = 
    let dist = differences freqPair
    let dir = direction dist
    let xDif = fst dist
    let yDif = snd dist
    let (coord1, coord2) = freqPair
    let rec downwardsNodes start dist acc =
        let newCoord = calculateNewCoordinates start (-xDif, -yDif)
        if isWithinBounds newCoord then
            downwardsNodes newCoord dist (newCoord::acc)
        else
            acc
    let rec upwardsNodes start dist acc =
        let newCoord = calculateNewCoordinates start (xDif, yDif)
        if isWithinBounds newCoord then
            upwardsNodes newCoord dist (newCoord::acc)
        else
            acc
    let downwards = downwardsNodes coord1 (xDif, yDif) []
    let upwards = upwardsNodes coord2 (xDif, yDif) []
    downwards @ upwards

let start = (0,0)
let second = (1,3)

let foo = candidateNodes2 (start, second)

freqNodePairs
|> Seq.map candidateNodes2
|> Seq.concat
|> Seq.filter isWithinBounds
|> Seq.distinct
|> Seq.length

    
